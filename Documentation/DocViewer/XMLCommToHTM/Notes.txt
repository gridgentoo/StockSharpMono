
ToDo: 
-- В описании класса добавить таблицы в конце: "Extension Methods","Explicit Interface Implementations"
--------------------

Примечания:
----------
Кроме типов 'P','F','M','E' есть еще:
'!' Error - The rest of the string provides information about the error. The C# compiler generates error information for links that cannot be resolved.
'N' Namespace - You cannot add documentation comments to a namespace, but you can make cref references to them, where supported.
Редко используемые.
----------
... If there are no arguments, no parentheses are present.
----------
 при отображении переворачивать jaged arrays
Т.к. в таком определении public static void F3(int[,,,][,,][,][] a);
Тип пишется "System.Int32[][,][,,][,,,]"  И в reflection и в XML
----------

 F(ref int i) , 
В Reflection тип: System.Int32&
В XML: System.Int32@
----------
Из reflection в описании доставать default ? : void F4(int i=1)
----------
Generic параметры в функциях, в XML имеют типы ``0,``1,... если они являются generic параметрами функции. 
  А если Generic параметрами класса, то `0,`1 (с одним штрихом)

В Reflection можно определить какой Generic - класса или метода, проверив DeclaringMethod==null
----------

==================
Особенности загрузки сборок в .NET через Assembly.LoadFrom

Для сборки межет быть загруженных 2 копии: текущая(из текущей папки), не текущая(из какой-то другой). 
И многократные вызовы Assembly.LoadFrom из разных папок(кроме текущей), загрузят только одну нетекущую копию. 
Многократные вызовы Assembly.LoadFrom для текущей папки, создадут одну текущую копию, независимо от того уже загружена или нет нетекущая копия.
При Assembly.LoadFrom , дочерние сборки ищутся сначала в текущей папке, потом из той же папки что и parent.
Если для дочерней сборки уже загружена копия через LoadFrom, независимо от того текущая она или нет, то вторая копия не грузится.
Дочерние сборки грузятся не сразу, а когда потребуется тип из них.






