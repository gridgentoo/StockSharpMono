<?xml version="1.0" encoding="utf-8"?>
<topic id="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>
			 <token>stocksharp</token> имеет механизм для работы одновременно с несколькими соединениями (коннекторами). Например, робот может одновременно вести торговлю через
			<token>quik</token> и <token>smartcom</token>, или работать с несколькими терминалами <token>quik</token>.
			 Этот механизм реализован на уровне сообщений. (см. <link xlink:href="5794f4b0-c536-4713-ad08-955a4a01b196">Сообщения</link>). За кулисами механизма лежит использование класса
			 <codeEntityReference>T:StockSharp.Algo.BasketMessageAdapter</codeEntityReference>, который позволяет последовательно оперировать несколькими адаптерами, связанными с различными
			 торговыми системами. Класс <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> имеет свойство <codeEntityReference>P:StockSharp.Algo.Connector.Adapter</codeEntityReference> этого типа.
		</para>
		<para>
			Организовать работу с несколькими коннекторами можно загрузив настойки из специального конфигурационного файла, в котором сохранены настройки коннектора, 
			в том числе настройки адаптеров, или ли же можно воспользоваться компонентом <codeEntityReference>T:StockSharp.Xaml.ConnectorWindow</codeEntityReference>, который
			является графическим сервисом для конфигурации коннектора.
		</para>
		<para>
			Ниже показан пример создания множественного подключения. Исходные коды примера находятся в проекте <legacyItalic>Samples/Common/SampleMultiConnection</legacyItalic>. 
		</para>
		<mediaLink><image placement="left" xlink:href="multiconnection_main" /></mediaLink>
	</introduction>
	
	<procedure>
      <title>Создание множественного подключения</title>
     <steps class="ordered">
		<step>
			<content>
				<para>
					  В конструкторе главного окна вызываем метод InitConnector, в котором выполняется конфигурирование коннектора, а также подписка на необходимые события.
				</para>
				<code language="C#">
				<![CDATA[
public MainWindow()
{
	InitializeComponent();
	Instance = this;

	Title = Title.Put("Multi connection");

	_ordersWindow.MakeHideable();
	_myTradesWindow.MakeHideable();
	_tradesWindow.MakeHideable();
	_securitiesWindow.MakeHideable();
	_stopOrdersWindow.MakeHideable();
	_portfoliosWindow.MakeHideable();

	var logManager = new LogManager();
	logManager.Listeners.Add(new FileLogListener("sample.log"));

	var entityRegistry = new CsvEntityRegistry("Data");

	ConfigManager.RegisterService<IEntityRegistry>(entityRegistry);
	// ecng.serialization invoke in several places IStorage obj
	ConfigManager.RegisterService(entityRegistry.Storage);

	var storageRegistry = ConfigManager.GetService<IStorageRegistry>();

	SerializationContext.DelayAction = entityRegistry.DelayAction = new DelayAction(entityRegistry.Storage, ex => ex.LogError());

	Connector = new Connector(entityRegistry, storageRegistry);
	logManager.Sources.Add(Connector);

	InitConnector(entityRegistry);
}

		]]>
				</code> 
		 	</content>
		</step>
		<step>
			<content>
				<para>
					   В методе InitConnector выполняется подписка на события коннектора, а также загрузка настроек коннектора из конфигурационного файла при помощи метода
					   <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.Load(Ecng.Serialization.SettingsStorage)</codeEntityReference>.
				</para>
				<code language="C#">
				<![CDATA[
private void InitConnector(CsvEntityRegistry entityRegistry)
{
	// subscribe on connection successfully event
	Connector.Connected += () =>
	{
		this.GuiAsync(() => ChangeConnectStatus(true));
	};

	// subscribe on connection error event
	Connector.ConnectionError += error => this.GuiAsync(() =>
	{
		ChangeConnectStatus(false);
		MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
	});

	Connector.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

	// subscribe on error event
	Connector.Error += error =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

	// subscribe on error of market data subscription event
	Connector.MarketDataSubscriptionFailed += (security, msg, error) =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));

	Connector.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
	Connector.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);

	Connector.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
	Connector.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
	Connector.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
	
	Connector.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
	Connector.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

	// subscribe on error of order registration event
	Connector.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of order cancelling event
	Connector.OrderCancelFailed += OrderFailed;

	// subscribe on error of stop-order registration event
	Connector.OrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of stop-order cancelling event
	Connector.StopOrderCancelFailed += OrderFailed;

	// set market data provider
	_securitiesWindow.SecurityPicker.MarketDataProvider = Connector;

	try
	{
		if (File.Exists(_settingsFile))
			Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
	}
	catch
	{
	}

	if (Connector.StorageAdapter == null)
		return;

	try
	{
		entityRegistry.Init();
	}
	catch (Exception ex)
	{
		MessageBox.Show(this, ex.ToString());
	}

	Connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
	Connector.StorageAdapter.Load();

	ConfigManager.RegisterService<IExchangeInfoProvider>(new StorageExchangeInfoProvider(entityRegistry));
}

]]>
			</code> 
		 </content>
		  </step>
		  <step>
			<content>
				<para>
					 Ниже показан код обработчика события <legacyBold>Click</legacyBold> кнопки <legacyBold>Настройки</legacyBold>. В обработчике вызывается метод 
					 <codeEntityReference>M:StockSharp.Configuration.Extensions.Configure(StockSharp.Algo.Connector,System.Windows.Window)</codeEntityReference>. Этот метод открывает окно Настройки подключений (см. ниже).
					 Также в обработчике выполняется сохранение настроек коннектора в конфигурационный файл. Этот файл в последующем можно использовать для конфигурирования коннектора без вызова окна Настроек подключения.  
				</para>
				<code language="C#">
				<![CDATA[
private void SettingsClick(object sender, RoutedEventArgs e)
{
	if (Connector.Configure(this))
		new XmlSerializer<SettingsStorage>().Serialize(Connector.Save(), _settingsFile);
}
		]]>
				</code> 
		 	</content>
		</step>
		  <step>
			<content>
				<para>
				 Здесь представлено окно настройки подключений. Из раскрывающегося списка (открывается кнопкой '+') необходимо выбрать нужные адаптеры и настроить их свойства
				 в окне свойств, расположенном справа. Например, для <token>smartcom</token> нужно указать адрес сервера, логин и пароль. Для работы с несколькими <token>quik</token> будет нужно указать
				 адреса серверов Lua.
				</para>
				<mediaLink><image placement="left" xlink:href="multiconnection_settings" /></mediaLink>
				
				<alert class="note">
  					<para>Корректность подключения можно проверить при помощи кнопки <legacyBold>Проверить</legacyBold>.</para>
				</alert>
				
				<para>
				Результатом работы этого окна будет создание и добавление адаптеров в список <legacyItalic>внутренних</legacyItalic> адаптеров свойства 
				<codeEntityReference qualifyHint="true" >P:StockSharp.Algo.Connector.Adapter</codeEntityReference>.
				</para>
		 	</content>
		</step>

      </steps>
    </procedure> 
	 
  </developerWalkthroughDocument>
</topic>