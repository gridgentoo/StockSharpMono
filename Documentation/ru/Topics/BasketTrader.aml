<?xml version="1.0" encoding="utf-8"?>
<topic id="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>
			 <token>stocksharp</token> имеет механизм для работы одновременно с несколькими соединениями (коннекторами). Например, робот может одновременно вести торговлю через
			<token>quik</token> и <token>smartcom</token>, или работать с несколькими терминалами <token>quik</token>.
			 Этот механизм реализован на уровне сообщений. (см. <link xlink:href="5794f4b0-c536-4713-ad08-955a4a01b196">Сообщения</link>). За кулисами механизма лежит использование класса
			 <codeEntityReference>T:StockSharp.Algo.BasketMessageAdapter</codeEntityReference>, который позволяет последовательно оперировать несколькими адаптерами, связанными с различными
			 торговыми системами. Класс <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> имеет свойство <codeEntityReference>P:StockSharp.Algo.Connector.Adapter</codeEntityReference> этого типа.
		</para>
		<para>
			Организовать работу с несколькими коннекторами можно загрузив настойки из специального конфигурационного файла, в котором сохранены настройки коннектора, 
			в том числе настройки адаптеров, или ли же можно воспользоваться компонентом <codeEntityReference>T:StockSharp.Xaml.ConnectorWindow</codeEntityReference>, который
			является графическим сервисом для конфигурации коннектора.
		</para>
		<para>
			Ниже показан пример создания множественного подключения. Исходные коды примера находятся в проекте <legacyItalic>Samples/Common/SampleMultiConnection</legacyItalic>. 
		</para>
		<mediaLink><image placement="left" xlink:href="multiconnection_main" /></mediaLink>
	</introduction>
	
	<procedure>
      <title>Создание множественного подключения</title>
     <steps class="ordered">
		<step>
			<content>
				<para>
					  В конструкторе главного окна вызываем метод InitConnector, в котором выполняется конфигурирование коннектора, а также подписка на необходимые события.
				</para>
				<code language="C#">
				<![CDATA[
...
public MainWindow()
{
	InitializeComponent();
...
	var logManager = new LogManager();
	logManager.Listeners.Add(new FileLogListener("sample.log"));

	var path = _defaultDataPath.ToFullPath();

	HistoryPath.Folder = path;

	var entityRegistry = new CsvEntityRegistry(path);

	var storageRegistry = new StorageRegistry
	{
		DefaultDrive = new LocalMarketDataDrive(path)
	};

	ConfigManager.RegisterService<IEntityRegistry>(entityRegistry);
	ConfigManager.RegisterService<IStorageRegistry>(storageRegistry);
	// ecng.serialization invoke in several places IStorage obj
	ConfigManager.RegisterService(entityRegistry.Storage);

	var snapshotRegistry = new SnapshotRegistry(Path.Combine(path, "Snapshots"));

	Connector = new Connector(entityRegistry, storageRegistry, snapshotRegistry);
	logManager.Sources.Add(Connector);

	InitConnector(entityRegistry, snapshotRegistry);
}
		]]>
				</code> 
		 	</content>
		</step>
		<step>
			<content>
				<para>
					   В методе InitConnector выполняется подписка на события коннектора, а также загрузка настроек коннектора из конфигурационного файла при помощи метода
					   <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.Load(Ecng.Serialization.SettingsStorage)</codeEntityReference>.
				</para>
				<code language="C#">
				<![CDATA[
private void InitConnector(CsvEntityRegistry entityRegistry, SnapshotRegistry snapshotRegistry)
{
	// subscribe on connection successfully event
	Connector.Connected += () =>
	{
		this.GuiAsync(() => ChangeConnectStatus(true));
	};

	// subscribe on connection error event
	Connector.ConnectionError += error => this.GuiAsync(() =>
	{
		ChangeConnectStatus(false);
		MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
	});

	Connector.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

	// subscribe on error event
	Connector.Error += error =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

	// subscribe on error of market data subscription event
	Connector.MarketDataSubscriptionFailed += (security, msg, error) =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)))

	Connector.NewSecurity += _securitiesWindow.SecurityPicker.Securities.Add;
	Connector.NewTrade += _tradesWindow.TradeGrid.Trades.Add;

	Connector.NewOrder += _ordersWindow.OrderGrid.Orders.Add;
	Connector.NewStopOrder += _stopOrdersWindow.OrderGrid.Orders.Add;
	Connector.NewMyTrade += _myTradesWindow.TradeGrid.Trades.Add;
	
	Connector.NewPortfolio += _portfoliosWindow.PortfolioGrid.Portfolios.Add;
	Connector.NewPosition += _portfoliosWindow.PortfolioGrid.Positions.Add;

	// subscribe on error of order registration event
	Connector.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of order cancelling event
	Connector.OrderCancelFailed += OrderFailed;

	// subscribe on error of stop-order registration event
	Connector.OrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of stop-order cancelling event
	Connector.StopOrderCancelFailed += OrderFailed;

	// set market data provider
	_securitiesWindow.SecurityPicker.MarketDataProvider = Connector;

	try
	{
		if (File.Exists(_settingsFile))
		{
			var ctx = new ContinueOnExceptionContext();
			ctx.Error += ex => ex.LogError();

			using (new Scope<ContinueOnExceptionContext> (ctx))
				Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
		}
	}
	catch
	{
	}

	if (Connector.StorageAdapter == null)
		return;

	try
	{
		entityRegistry.Init();
	}
	catch (Exception ex)
	{
		MessageBox.Show(this, ex.ToString());
	}

	Connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
	Connector.LookupAll();

	snapshotRegistry.Init();

	ConfigManager.RegisterService<IExchangeInfoProvider>(new StorageExchangeInfoProvider(entityRegistry));
}
]]>
			</code> 
		 </content>
		  </step>
		  <step>
			<content>
				<para>
Код обработчика события <legacyBold>Click</legacyBold>  кнопки <legacyBold>Настройки</legacyBold> 
вызывает <link xlink:href="0e99f0d7-9d8a-4bb5-a914-6461677b267b" />, в котором можно настроить все необходимые подключения.

				</para>
				<mediaLink><image placement="left" xlink:href="API_GUI_ConnectorWindow" /></mediaLink>
		 	</content>
		</step>
      </steps>
    </procedure> 
	 <relatedTopics>
<link xlink:href="c23300a1-bf38-444a-b103-28350766477f" />
<link xlink:href="0e99f0d7-9d8a-4bb5-a914-6461677b267b" />
</relatedTopics>
  </developerWalkthroughDocument>
</topic>