<?xml version="1.0" encoding="utf-8"?>
<topic id="8ec4f4b6-e7c8-4bf0-b05e-1d98960ca45f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	<codeEntityReference>T:StockSharp.Xaml.TradeGrid</codeEntityReference> - trade table.
      </para>
      <para>
       <legacyBold>Main properties</legacyBold>
      </para>
      
		<list class="bullet">
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.Trades</codeEntityReference> - the list of trades.</para>
  			</listItem>
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.SelectedTrade</codeEntityReference> - the selected trade.</para>
  			</listItem>
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.SelectedTrades</codeEntityReference> - selected trades.</para>
  			</listItem>
		</list>
		
	  <para>
Below is the appearance of the component, as well as code snippets with its use. The code example is taken from <legacyItalic>Samples/SampleOEC</legacyItalic>.
      </para>
      
      <mediaLink><image placement="left" xlink:href="GUI_TradeGrid" /></mediaLink>
      
       <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="SampleOEC.MyTradesWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.MyTrades}" Height="284" Width="644">
	<xaml:MyTradeGrid x:Name="TradeGrid" x:FieldModifier="public" />
</Window>
	  				]]>
              </code>
              <code title="C#" language="C#">
              		<![CDATA[
.......................................

		// create connector
Trader = new OpenECryTrader
{
	//UseNativeReconnect = false,
	EnableOECLogging = true
};

Trader.Restored += () => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(true);
	MessageBox.Show(this, LocalizedStrings.Str2958);
});

// subscribe on connection successfully event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));

	// subscribe on news
	Trader.RegisterNews();
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);	
});

Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
Trader.NewPortfolio += portfolio =>
{
	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);

	// subscribe on portfolio updates
	Trader.RegisterPortfolio(portfolio);
};
Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// subscribe on error of order registration event
Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
// subscribe on error of order cancelling event
Trader.OrderCancelFailed += OrderFailed;

// subscribe on error of stop-order registration event
Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
// subscribe on error of stop-order cancelling event
Trader.StopOrderCancelFailed += OrderFailed;

Trader.MassOrderCancelFailed += (transId, error) =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str716));

Trader.NewNews += news => _newsWindow.NewsPanel.NewsGrid.News.Add(news);
.......................................
}
              		
	  				]]>
             </code>
    </introduction>
  </developerConceptualDocument>
</topic>

