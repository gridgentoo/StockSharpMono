<?xml version="1.0" encoding="utf-8"?>
<topic id="ca67819a-60b8-42f0-a512-ad0792d544f2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
The SampleITCH application shows an example of working with <codeEntityReference>T:StockSharp.ITCH.ItchTrader</codeEntityReference> as 
shown in the figure below. The example source code is in the <legacyItalic>Samples/ITCH</legacyItalic> folder of the installation package.<legacyItalic>Samples/ITCH</legacyItalic>.
      </para>
      <mediaLink><image placement="center" xlink:href="ITCHSettings"/></mediaLink>
    </introduction>
    <procedure>
		<steps class="ordered">
			<step>
				<content>
<para>In the designer of the main window: 1) creating an instance of the connector, and to get order books, setting the 
<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Connector.CreateDepthFromOrdersLog</codeEntityReference>
property to ‘true’, 2) passing the connector's market data adapter to the Settings (PropertyGridEx) element. 
The adapter properties are configured in the graphical interface, see the figure above.
					</para>
            		<code language="C#">
            				<![CDATA[
public MainWindow()
{
    ..................................................
    
	_logManager.Listeners.Add(new FileLogListener { LogDirectory = "StockSharp_ITCH" });
	_logManager.Listeners.Add(new GuiLogListener(Monitor));

	// create connector
	Trader = new ItchTrader
	{
		LogLevel = LogLevels.Debug,
		CreateDepthFromOrdersLog = true
	};

	_logManager.Sources.Add(Trader);

	Settings.SelectedObject = Trader.MarketDataAdapter;
}
]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>2.	Then we install the necessary 
					<codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> 
					event handlers. In the handler of the 
					<codeEntityReference qualifyHint="false">E:StockSharp.BusinessEntities.IConnector.LookupSecuritiesResult</codeEntityReference> 
					event, we subscribe to the receiving of the order log. We connect streams of instruments, orders, trades and the order log 
					to the corresponding graphic elements. Establishing the connection.</para>
					<code language="C#">
            				<![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{
		.....................

		if (!_initialized)
		{
			_initialized = true;

			// subscribe on connection successfully event
			Trader.Connected += () =>
			{
				// set flag (connection is established)
				_isConnected = true;

				// update gui labes
				this.GuiAsync(() => ChangeConnectStatus(true));
			};
			Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

			// subscribe on connection error event
			Trader.ConnectionError += error => this.GuiAsync(() =>
			{
				// update gui labes
				ChangeConnectStatus(false);

				MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);	
			});

			// subscribe on error event
			Trader.Error += error =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

			// subscribe on error of market data subscription event
			Trader.MarketDataSubscriptionFailed += (security, type, error) =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

			Trader.NewSecurity += _securitiesWindow.SecurityPicker.Securities.Add;
			Trader.NewTrade += _tradesWindow.TradeGrid.Trades.Add;
			Trader.NewOrderLogItem += _orderLogWindow.OrderLogGrid.LogItems.Add;


			var subscribed = false;
			//if (AllDepths.IsChecked == true)
			{
				Trader.LookupSecuritiesResult += securities =>
				{
					if (subscribed)
						return;

					subscribed = true;

					Trader.SendInMessage(new MarketDataMessage
					{
						IsSubscribe = true,
						DataType = MarketDataTypes.OrderLog,
						TransactionId = Trader.TransactionIdGenerator.GetNextId(),
					});
				};	
			}
					
			// set market data provider
			_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled = ShowOrdersLog.IsEnabled = true;
		}

		Trader.Connect();
	}
	else
	{
		Trader.Disconnect();
	}
}

			]]>
					</code>						
				</content>
			</step>
		</steps>
    </procedure>
   
  </developerConceptualDocument>
</topic>