<?xml version="1.0" encoding="utf-8"?>
<topic id="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>
			 <token>stocksharp</token> has a mechanism to work simultaneously with multiple connections (connectors). For example, the algorithm can simultaneously
			 perform trade through <token>ib</token> and <token>openecry</token>, or work with multiple <token>ib</token> terminals.
			 This mechanism is implemented at the message level (see <link xlink:href="5794f4b0-c536-4713-ad08-955a4a01b196">Messages</link>).
			 Behind the scenes of this mechanism is the use of the <codeEntityReference>T:StockSharp.Algo.BasketMessageAdapter</codeEntityReference> class, which allows
			 you to sequentially operate multiple adapters connected to various trading systems. The <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>
			 class has the <codeEntityReference>P:StockSharp.Algo.Connector.Adapter</codeEntityReference> property of this type.
		</para>
		<para>
			It is possible to organize work with several connectors downloading the settings from the special configuration file, in which the connector settings are
			saved, including adapters settings. Or it is possible to use the <codeEntityReference>T:StockSharp.Xaml.ConnectorWindow</codeEntityReference>
			component, which is a graphical service for the connector configuration.
		</para>
		<para>
			The following is an example of creating multiple connection. Source codes of the example are in the <legacyItalic>Samples/Common/SampleMultiConnection</legacyItalic>
			project.
		</para>
		<mediaLink><image placement="left" xlink:href="multiconnection_main" /></mediaLink>
	</introduction>
	
	<procedure>
      <title>Creating multiple connection</title>
     <steps class="ordered">
		<step>
			<content>
				<para>
					  In the main window constructor we call the InitConnector method in which the connector is configured, as well as subscription to the
					  required events is performed.
				</para>
				<code language="C#">
				<![CDATA[
public MainWindow()
{
	InitializeComponent();
	Instance = this;

	Title = Title.Put("Multi connection");

	_ordersWindow.MakeHideable();
	_myTradesWindow.MakeHideable();
	_tradesWindow.MakeHideable();
	_securitiesWindow.MakeHideable();
	_stopOrdersWindow.MakeHideable();
	_portfoliosWindow.MakeHideable();

	var logManager = new LogManager();
	logManager.Listeners.Add(new FileLogListener("sample.log"));

	var entityRegistry = new CsvEntityRegistry("Data");

	ConfigManager.RegisterService<IEntityRegistry>(entityRegistry);
	// ecng.serialization invoke in several places IStorage obj
	ConfigManager.RegisterService(entityRegistry.Storage);

	var storageRegistry = ConfigManager.GetService<IStorageRegistry>();

	Connector = new Connector(entityRegistry, storageRegistry);
	logManager.Sources.Add(Connector);

	InitConnector(entityRegistry);
}
		]]>
				</code> 
		 	</content>
		</step>
		<step>
			<content>
				<para>
					   The subscription to the connector events is performed in the InitConnector method, as well as connector settings loading from the configuration file using the 
					   <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.Load(Ecng.Serialization.SettingsStorage)</codeEntityReference> method.
				</para>
				<code language="C#">
				<![CDATA[
private void InitConnector(CsvEntityRegistry entityRegistry)
{
	// subscribe on connection successfully event
	Connector.Connected += () =>
	{
		this.GuiAsync(() => ChangeConnectStatus(true));
	};

	// subscribe on connection error event
	Connector.ConnectionError += error => this.GuiAsync(() =>
	{
		ChangeConnectStatus(false);
		MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
	});

	Connector.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

	// subscribe on error event
	Connector.Error += error =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

	// subscribe on error of market data subscription event
	Connector.MarketDataSubscriptionFailed += (security, msg, error) =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));

	Connector.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
	Connector.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);

	Connector.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
	Connector.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
	Connector.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
	
	Connector.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
	Connector.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

	// subscribe on error of order registration event
	Connector.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of order cancelling event
	Connector.OrderCancelFailed += OrderFailed;

	// subscribe on error of stop-order registration event
	Connector.OrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of stop-order cancelling event
	Connector.StopOrderCancelFailed += OrderFailed;

	// set market data provider
	_securitiesWindow.SecurityPicker.MarketDataProvider = Connector;

	try
	{
		if (File.Exists(_settingsFile))
			Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
	}
	catch
	{
	}

	if (Connector.StorageAdapter == null)
		return;

	try
	{
		entityRegistry.Init();
	}
	catch (Exception ex)
	{
		MessageBox.Show(this, ex.ToString());
	}

	Connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
	Connector.StorageAdapter.Load();

	ConfigManager.RegisterService<IExchangeInfoProvider>(new StorageExchangeInfoProvider(entityRegistry));
}
]]>
			</code> 
		 </content>
		  </step>
		  <step>
			<content>
				<para>
					 The following is the code of the <legacyBold>Settings</legacyBold> button <legacyBold>Click</legacyBold> event handler. The 
					 <codeEntityReference>M:StockSharp.Configuration.Extensions.Configure(StockSharp.Algo.Connector,System.Windows.Window)</codeEntityReference> method
					 is called in the handler. This method opens the Connection Settings window (see below). Also in the handler the connector settings are saved to
					 the configuration file. Further this file can be used to configure the connector without calling the Connection Settings window
				</para>
				<code language="C#">
				<![CDATA[
private void SettingsClick(object sender, RoutedEventArgs e)
{
	if (Connector.Configure(this))
		new XmlSerializer<SettingsStorage>().Serialize(Connector.Save(), _settingsFile);
}
		]]>
				</code> 
		 	</content>
		</step>
		  <step>
			<content>
				<para>
				 The connection settings window is shown here. It is necessary to select the required adapters from the drop-down list (it is opened by clicking '+')
				 and to set their properties in the Properties window on the right. For example, for <token>openecry</token> it is required to specify the server address,
				 login and password.
				</para>
				<mediaLink><image placement="left" xlink:href="multiconnection_settings" /></mediaLink>
				
				<alert class="note">
  					<para>The valid of the connection can be checked using the <legacyBold>Test</legacyBold> button.</para>
				</alert>
				
				<para>
				The result of this window will be creating and adding the adapters to the list of the <codeEntityReference qualifyHint="true" >P:StockSharp.Algo.Connector.Adapter</codeEntityReference>
				property <legacyItalic>internal</legacyItalic> adapters.
				</para>
		 	</content>
		</step>

      </steps>
    </procedure> 
	 
	 
  </developerWalkthroughDocument>
</topic>