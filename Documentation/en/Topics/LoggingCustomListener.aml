<?xml version="1.0" encoding="utf-8"?>
<topic id="a711d06d-9d1d-40b8-89bf-ee62d817a878" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      	<para>
      		If you want to create your own implementation of the <codeEntityReference>T:StockSharp.Logging.ILogListener</codeEntityReference> (for example, when you
      		want to save messages in the database), the class <codeEntityReference>T:StockSharp.Logging.LogListener</codeEntityReference>
      		can be inherited or the <codeEntityReference>T:StockSharp.Logging.ILogListener</codeEntityReference> interface can be implemented directly. The object of the
      		<codeEntityReference>T:StockSharp.Logging.LogMessage</codeEntityReference> class is passed through the
			<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Logging.ILogListener.WriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})</codeEntityReference>
			method. This class contains the information about the message source <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogMessage.Source</codeEntityReference> (
			for example, a strategy that has generated the message), the message type <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogMessage.Level</codeEntityReference>
			(information, warning or error), as well as the <codeEntityReference qualifyHint="true">P:StockSharp.Logging.LogMessage.Message</codeEntityReference>.
			text itself. The following example shows the source code of <codeEntityReference>T:StockSharp.Logging.EmailLogListener</codeEntityReference>:
		</para>
		<code language="C#"><![CDATA[/// <summary>
/// The logger sending data to the email.
/// </summary>
public class EmailLogListener : LogListener
{
	private readonly BlockingQueue<Tuple<string, string>> _queue = new BlockingQueue<Tuple<string, string>>();

	private bool _isThreadStarted;

	/// <summary>
	/// Initializes a new instance of the <see cref="EmailLogListener"/>.
	/// </summary>
	public EmailLogListener()
	{
	}

	/// <summary>
	/// The address, on whose behalf the message will be sent.
	/// </summary>
	public string From { get; set; }

	/// <summary>
	/// The address to which the message will be sent to.
	/// </summary>
	public string To { get; set; }

	/// <summary>
	/// To create the email client.
	/// </summary>
	/// <returns>The email client.</returns>
	protected virtual SmtpClient CreateClient()
	{
		return new SmtpClient();
	}

	/// <summary>
	/// To create a header.
	/// </summary>
	/// <param name="message">A debug message.</param>
	/// <returns>Header.</returns>
	protected virtual string GetSubject(LogMessage message)
	{
		if (message == null)
			throw new ArgumentNullException(nameof(message));

		return message.Source.Name + " " + message.Level + " " + message.Time.ToString(TimeFormat);
	}

	/// <summary>
	/// To add a message in a queue for sending.
	/// </summary>
	/// <param name="message">Message.</param>
	private void EnqueueMessage(LogMessage message)
	{
		if (message.IsDispose)
		{
			Dispose();
			return;
		}

		_queue.Enqueue(Tuple.Create(GetSubject(message), message.Message));

		lock (_queue.SyncRoot)
		{
			if (_isThreadStarted)
				return;

			_isThreadStarted = true;

			ThreadingHelper.Thread(() =>
			{
				try
				{
					using (var email = CreateClient())
					{
						while (true)
						{
							Tuple<string, string> m;

							if (!_queue.TryDequeue(out m))
								break;

							email.Send(From, To, m.Item1, m.Item2);
						}
					}

					lock (_queue.SyncRoot)
						_isThreadStarted = false;
				}
				catch (Exception ex)
				{
					Trace.WriteLine(ex);
				}
			}).Name("Email log queue").Launch();
		}
	}

	/// <summary>
	/// To record a message.
	/// </summary>
	/// <param name="message">A debug message.</param>
	protected override void OnWriteMessage(LogMessage message)
	{
		EnqueueMessage(message);
	}

	/// <summary>
	/// Load settings.
	/// </summary>
	/// <param name="storage">Settings storage.</param>
	public override void Load(SettingsStorage storage)
	{
		base.Load(storage);

		From = storage.GetValue<string>(nameof(From));
		To = storage.GetValue<string>(nameof(To));
	}

	/// <summary>
	/// Save settings.
	/// </summary>
	/// <param name="storage">Settings storage.</param>
	public override void Save(SettingsStorage storage)
	{
		base.Save(storage);

		storage.SetValue(nameof(From), From);
		storage.SetValue(nameof(To), To);
	}

	/// <summary>
	/// Release resources.
	/// </summary>
	protected override void DisposeManaged()
	{
		_queue.Close();
		base.DisposeManaged();
	}
}]]></code>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <!--procedure>
      <title>Procedure title</title>
      <steps class="ordered">
        <step>
          <content>
            <para>First step</para>
          </content>
        </step>
        <step>
          <content>
            <para>Second step</para>
          </content>
        </step>
      </steps>
    </procedure-->
    <!-- Optional additional procedure or section with procedure -->
    
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>